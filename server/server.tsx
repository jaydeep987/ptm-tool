import cors = require('cors');
import express = require('express');
import path = require('path');
import favicon = require('serve-favicon');

import asyncBootStrapper = require('react-async-bootstrapper');
import serialize = require('serialize-javascript');

import Loadable = require('react-loadable');
import { getBundles } from 'react-loadable/webpack';
import stats = require('../static/react-loadable.json');

import chalk from 'chalk';
import createHistory, { MemoryHistory } from 'history/createMemoryHistory';
import * as React from 'react';
import { renderToString } from 'react-dom/server';
import { matchPath } from 'react-router-dom';
import { ServerStyleSheet } from 'styled-components';

import { routesData } from '../client/app/modules/routes';
import configureStore from '../client/app/modules/store';
import * as settings from '../webpack/settings';
import Main from './component/Main';

const app = express();

app.use(cors());
app.use(express.static('static'));

app.set('views', path.join(__dirname, './views'));
app.set('view engine', 'ejs');

app.use(favicon(settings.paths.favicon));

app.get('/', (req: any, res: any, next: () => any) => {
  console.log(req.url);
  const memoryHistory: MemoryHistory = createHistory();
  const store = configureStore({}, memoryHistory);
  const dispatchData =
    routesData
      .filter((route: any) => matchPath(req.url, route))
      .map((route: any) => route.component)
      .filter((component: any) => component.fetchApiData)
      .map((component: any) => store.dispatch(component.fetchApiData()));

  Promise.all(dispatchData).then(() => {
    const context = { };
    const modules: any[] = [];

    const MainComponent = (
      <Loadable.Capture report={(moduleName) => modules.push(moduleName)}>
        <Main memoryHistory={memoryHistory} store={store} request={req} rContext={context} />
      </Loadable.Capture>
    );

    const sheets = new ServerStyleSheet();

    const content = renderToString(sheets.collectStyles(MainComponent));

    const styleTags = sheets.getStyleTags();

    const state = JSON.stringify(store.getState());

    // Read assets.json file generated by webpack to get all js and css files
    const jsFileName = settings.options.fileName;

    res.render('index', {
      state,
      content,
      styleTags,
      styles: [settings.options.cssBundleFileName],
      clientJs: [jsFileName.replace('[name]', 'main')],
    });
  });
});

Loadable.preloadAll().then(() => {
  app.listen(process.env.PORT || 3002, () => {
    console.log(
      `[${new Date().toISOString()}]`,
      chalk.yellow(`App is running: ðŸŒŽ http://localhost:${process.env.PORT || 3002}`),
    );
  });
});
